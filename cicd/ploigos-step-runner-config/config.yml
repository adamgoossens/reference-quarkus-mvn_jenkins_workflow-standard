step-runner-config:
  config-decryptors:
  - implementer: SOPS

  global-defaults:
    organization: platform
    application-name: fruit-and-nut
    service-name: fruit
    tls-verify: True

    #####
    #
    # Maven servers used during the pipeline
    #
    # Credentials in secrets.yaml
    ####
    maven-servers:
      internal-mirror:
        id: maven-public
      maven-releases:
        id: maven-releases

    #####
    #
    # Maven repositories used during the build.
    #
    ####
    maven-repositories:
      maven-releases:
        id: maven-releases
        url: https://nexus-devsecops.apps.cluster-d664.d664.sandbox567.opentlc.com/repository/maven-releases/
        snapshots: false
        releases: true

    maven-mirrors:
      internal-mirror:
        id: maven-public
        url: https://nexus-devsecops.apps.cluster-d664.d664.sandbox567.opentlc.com/repository/maven-public/
        mirror-of: '*'

    #####
    #
    # Container registry details are encrypted in secrets.yaml
    #
    #####
    #
  global-environment-defaults:
    DEV:
      kube-app-domain: dev.apps.cluster-d664.d664.sandbox567.opentlc.com
    TEST:
      kube-app-domain: test.apps.preprod.az.adamgoossens.com
    PROD:
      kube-app-domain: apps.prod.adamgoossens.com

  generate-metadata:
  - implementer: Maven
  - implementer: Git
  - implementer: SemanticVersion

  tag-source:
  - implementer: Git

  unit-test:
  - implementer: Maven

  package:
  - implementer: Maven

  #####
  #
  # SonarQube credentials in secrets.yaml
  #
  #####
  static-code-analysis:
  - implementer: SonarQube
    config:
      url: https://sonarqube-devsecops.apps.cluster-d664.d664.sandbox567.opentlc.com/

  push-artifacts:
  - implementer: Maven
    config:
      maven-push-artifact-repo-id: maven-releases
      maven-push-artifact-repo-url: https://nexus-devsecops.apps.cluster-d664.d664.sandbox567.opentlc.com/repository/maven-releases

  create-container-image:
  - implementer: Buildah

  #####
  #
  # The Skopeo implementer is opionated on where it will push the resulting container artifact
  #
  # The resulting push URL will be: <registry_uri>/<organization>/<application>-<service>:<tag>
  #
  # registry_uri is configured via 'destination-url', organization/application/service come from
  # the values at the top of this file.
  #
  # tag defaults to 'latest', otherwise the value of 'container-image-version' is used.
  #
  #####
  push-container-image:
  - implementer: Skopeo
    config:
      destination-url: nexus-docker-devsecops.apps.cluster-d664.d664.sandbox567.opentlc.com

  sign-container-image:
  - implementer: PodmanSign
    config:
      container-image-signature-server-url: https://nexus-devsecops.apps.cluster-d664.d664.sandbox567.opentlc.com/repository/container-image-signatures

  container-image-static-compliance-scan:
  - name: OpenSCAP - Compliance - Example Compliance Profile for UBI8 Container Images [Based on xccdf_org.ssgproject.content_profile_standard]
    implementer: OpenSCAP
    config:
      oscap-input-definitions-uri: https://atopathways.redhatgov.io/compliance-as-code/scap/ssg-rhel8-ds.xml
      oscap-tailoring-uri: https://raw.githubusercontent.com/ploigos/ploigos-example-oscap-content/main/xccdf_com.redhat.ploigos_profile_example_ubi8-tailoring-xccdf.xml
      oscap-profile: xccdf_com.redhat.ploigos_profile_example_ubi8

  container-image-static-vulnerability-scan:
  - name: OpenSCAP - Vulnerability - DataStream
    implementer: OpenSCAP
    config:
      oscap-input-definitions-uri: https://www.redhat.com/security/data/metrics/ds/v2/RHEL8/rhel-8.ds.xml.bz2

  deploy:
  - implementer: ArgoCD
    config:
      num-replicas: 1
      route-enabled: true

      #####
      #
      # The ArgoCD implementer expects a repository that contains a Helm chart.
      #
      # It will then update corresponding values files in this repository with the 
      # tag of the newly built image. It will use the yq path specified in
      # `deployment-config-helm-chart-values-file-image-tag-yq-path` to select this
      # image tag in the values file and update it.
      #
      # Once updated, it will commit the changed values.yaml file back to the repository.
      #
      #####
      deployment-config-repo: http://gitea.devsecops.svc.cluster.local:3000/platform/reference-quarkus-mvn-cloud-resources_jenkins_workflow-standard.git
      deployment-config-helm-chart-path: charts/reference-quarkus-mvn-deploy
      deployment-config-helm-chart-values-file-image-tag-yq-path: 'image.tag'
      
      #####
      #
      # Connection details to the ArgoCD API. Credentials in secrets.yaml.
      #
      # Does not have to be local to this cluster.
      #
      #####
      argocd-api: argocd-server.devsecops.svc.cluster.local
      argocd-skip-tls: True
      argocd-sync-timeout-seconds: 130

      #####
      #
      # Used by the ArgoCD implementer for committing to `deployment-config-repo`
      # when the Helm chart values have been changed.
      #
      # Auth using git-username and git-password; see secrets.yaml
      #####
      git-email: 'adam.goossens@gmail.com'

      #####
      #
      # Here, I am targeting the ArgoCD deployment at three different clusters:
      # DEV, TEST and PROD.
      #
      # DEV is assumed to be the local cluster where the factory is deployed.
      #
      # TEST and PROD are separate clusters, so I specify kube-api-url for each.
      # They also have different tokens. Each Token grants ArgoCD permissions
      # to deploy the applications.
      #
      # `deployment-config-helm-chart-environment-values-file` is unique for
      # each of the environments. All three files are located in source control,
      # and each one will be updated automatically with new image tag information
      # when that environment is about to be deployed.
      #
      # Tokens in secrets.yaml.
      #
      #####
      environment-config:
        DEV:
          deployment-config-helm-chart-environment-values-file: values-DEV.yaml
        TEST:
          kube-api-url: https://api.preprod.az.adamgoossens.com:6443
          kube-api-skip-tls: True
          deployment-config-helm-chart-environment-values-file: values-TEST.yaml
        PROD:
          kube-api-url: https://api.prod.adamgoossens.com:6443
          kube-api-skip-tls: True
          deployment-config-helm-chart-environment-values-file: values-PROD.yaml

  validate-environment-configuration:
  - implementer: ConfiglintFromArgocd
  - implementer: Configlint
    config:
      rules: cicd/ValidateEnv/

  gather_evidence:
  - implementer: GenerateEvidence

  uat:
  - implementer: MavenSeleniumCucumber
    config: {
      selenium-hub-url: http://selenium-grid.devsecops.svc.cluster.local:4444
    }
